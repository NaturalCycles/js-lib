import{_ as a,c as i,o as e,ae as t}from"./chunks/framework.Xbv-JOCv.js";const c=JSON.parse('{"title":"Error","description":"","frontmatter":{},"headers":[],"relativePath":"error.md","filePath":"error.md"}'),r={name:"error.md"};function n(h,s,o,p,l,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="error" tabindex="-1">Error <a class="header-anchor" href="#error" aria-label="Permalink to &quot;Error&quot;">​</a></h1><h2 id="trycatch" tabindex="-1">_tryCatch <a class="header-anchor" href="#trycatch" aria-label="Permalink to &quot;\\_tryCatch&quot;">​</a></h2><p>Wraps/decorates a passed function with &quot;try/catch&quot;, so it never throws, but logs the error (if occured).</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someDangerousFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _tryCatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(someDangerousFunction)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will log on error, but never throw</span></span></code></pre></div><p>Allows to pass <code>onError()</code> function hook, that will be called on error.</p><h2 id="errorobject" tabindex="-1">ErrorObject <a class="header-anchor" href="#errorobject" aria-label="Permalink to &quot;ErrorObject&quot;">​</a></h2><p>Standartized &quot;Error object&quot; that contains arbitrary <code>data</code> object that can hold additional data.</p><p>This <code>data</code> object is defined as a Generic type to <code>ErrorObject</code>, so, e.g. <code>HttpError</code> has <code>HttpErrorData</code>, which has a mandatory <code>httpStatusCode: number</code> property.</p><p>Usage example of that:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpErrorObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.data.httpStatusCode)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="apperror" tabindex="-1">AppError <a class="header-anchor" href="#apperror" aria-label="Permalink to &quot;AppError&quot;">​</a></h2><p>The most basic implementation of an <code>Error</code> that complies with <code>ErrorObject</code> specification. Difference is that <code>ErrorObject</code> is purely a TypeScript interface (around any JS <code>object</code>), but <code>AppError</code> is a sub-class of <code>Error</code>. So, with <code>AppError</code> you can do <code>if (err instanceof AppError) ...</code>.</p><p>Because <code>AppError</code> implements <code>ErrorObject</code>, it guarantees an <code>err.data</code> object.</p><p>This basic contract allows to establish a standartized interface between the Frontend (in <code>frontend-lib</code>) and Backend (in <code>backend-lib</code>) and implement error-handling more efficiently.</p><h2 id="httperror" tabindex="-1">HttpError <a class="header-anchor" href="#httperror" aria-label="Permalink to &quot;HttpError&quot;">​</a></h2><p>Subclass of <code>AppError</code> that has some additional properties inside <code>data</code>, namely: <code>httpStatusCode: number</code>.</p><h2 id="httperrorresponse" tabindex="-1">HttpErrorResponse <a class="header-anchor" href="#httperrorresponse" aria-label="Permalink to &quot;HttpErrorResponse&quot;">​</a></h2><p>This is a standartized &quot;Error response from the Backend&quot; (as implemented in <code>backend-lib</code>). You can check/assert it with <a href="#ishttperrorresponse">_isHttpErrorResponse</a>, and then have all the guarantees and types about the containing <code>error</code> object.</p><p>Handling these type of errors is done &quot;automatically&quot; in <code>getKy</code> of the <code>frontend-lib</code>, and in <code>getGot</code> of the <code>backend-lib</code>.</p><h2 id="anytoerror" tabindex="-1">_anyToError <a class="header-anchor" href="#anytoerror" aria-label="Permalink to &quot;\\_anyToError&quot;">​</a></h2><p>Cast <code>any</code> to <code>Error</code>.</p><h2 id="errortoerrorobject" tabindex="-1">_errorToErrorObject <a class="header-anchor" href="#errortoerrorobject" aria-label="Permalink to &quot;\\_errorToErrorObject&quot;">​</a></h2><p>Cast <code>Error</code> to <code>ErrorObject</code>.</p><h2 id="ishttperrorresponse" tabindex="-1">_isHttpErrorResponse <a class="header-anchor" href="#ishttperrorresponse" aria-label="Permalink to &quot;\\_isHttpErrorResponse&quot;">​</a></h2><p>Assert if provided <code>value: any</code> is a <a href="#httperrorresponse">HttpErrorResponse</a>.</p><h2 id="ishttperrorobject" tabindex="-1">_isHttpErrorObject <a class="header-anchor" href="#ishttperrorobject" aria-label="Permalink to &quot;\\_isHttpErrorObject&quot;">​</a></h2><p>Assert if provided <code>value: any</code> is a <code>HttpErrorObject</code> (an <code>HttpError</code>, same as <code>AppError&lt;HttpErrorData&gt;</code>).</p><h2 id="iserrorobject" tabindex="-1">_isErrorObject <a class="header-anchor" href="#iserrorobject" aria-label="Permalink to &quot;\\_isErrorObject&quot;">​</a></h2><p>Assert if provided <code>value: any</code> is an <a href="#errorobject">ErrorObject</a>.</p><h2 id="assert" tabindex="-1">_assert <a class="header-anchor" href="#assert" aria-label="Permalink to &quot;\\_assert&quot;">​</a></h2><p>Asserts that a boolean condition is <code>truthy</code>, otherwise throws an Error.</p><p>Evaluates the <code>condition</code> (casts it to Boolean). Expects it to be truthy, otherwise throws AppError.</p><p>Should be used NOT for &quot;expected&quot; / user-facing errors, but vice-versa - for completely unexpected and 100% buggy &quot;should never happen&quot; cases.</p><p>It&#39;ll result in http 500 on the server (cause that&#39;s the right code for &quot;unexpected&quot; errors). Pass { httpStatusCode: x } at errorData argument to override the http code (will be picked up by backend-lib).</p><p>API is similar to Node&#39;s assert(), except:</p><ol><li>Throws js-lib&#39;s AppError</li><li>Has a default message, if not provided</li></ol><p>Since 2024-07-10 it no longer sets <code>userFriendly: true</code> by default.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // from here TypeScript will know that \`err instanceof AppError === true\`, or \`err: AppError\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Example with custom error message:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error should be of type AppError&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="assertequals" tabindex="-1">_assertEquals <a class="header-anchor" href="#assertequals" aria-label="Permalink to &quot;\\_assertEquals&quot;">​</a></h2><p>Similar to <a href="#assert">_assert</a>, but allows to provide 2 values (first 2 arguments) and throws if they are NOT equal.</p><p>Does a shallow equality check (<code>!==</code>), use <a href="#assertdeepequals">_assertDeepEquals</a> if you need a deep-check.</p><h2 id="assertdeepequals" tabindex="-1">_assertDeepEquals <a class="header-anchor" href="#assertdeepequals" aria-label="Permalink to &quot;\\_assertDeepEquals&quot;">​</a></h2><p>Similar to <a href="#assertequals">_assertEquals</a>, but does a deep assertion (using <a href="./object.html#deepequals">_deepEquals</a>).</p><h2 id="assertiserror" tabindex="-1">_assertIsError <a class="header-anchor" href="#assertiserror" aria-label="Permalink to &quot;\\_assertIsError&quot;">​</a></h2><p>Asserts that passed value is <code>instanceof Error</code>.</p><h2 id="assertsistypeof" tabindex="-1">_assertsIsTypeOf <a class="header-anchor" href="#assertsistypeof" aria-label="Permalink to &quot;\\_assertsIsTypeOf&quot;">​</a></h2><p>Asserts that <code>typeof value</code> matches expected type.</p><h2 id="assertsisstring" tabindex="-1">_assertsIsString <a class="header-anchor" href="#assertsisstring" aria-label="Permalink to &quot;\\_assertsIsString&quot;">​</a></h2><p>Asserts that <code>typeof value === &#39;string</code></p><h2 id="assertsisnumber" tabindex="-1">_assertsIsNumber <a class="header-anchor" href="#assertsisnumber" aria-label="Permalink to &quot;\\_assertsIsNumber&quot;">​</a></h2><p>Asserts that <code>typeof value === &#39;number</code></p><h2 id="try" tabindex="-1">_try <a class="header-anchor" href="#try" aria-label="Permalink to &quot;\\_try&quot;">​</a></h2><p>Calls a function, returns a Tuple of <code>[error, value]</code>. Allows to write shorter code that avoids try/catch. Useful e.g. in unit tests.</p><p>Similar to <a href="#ptry">pTry</a>, but for sync functions.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h2 id="ptry" tabindex="-1">pTry <a class="header-anchor" href="#ptry" aria-label="Permalink to &quot;pTry&quot;">​</a></h2><p>Loosely inspired by <a href="https://github.com/scopsy/await-to-js" target="_blank" rel="noreferrer">await-to-js</a>.</p><p>Similar to <a href="#_try">_try</a>, but for promises.</p><p>Async/await wrapper for easy error handling. Wraps async/await calls in try catch blocks and returns a tuple containing the error or the results of the promise</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServerResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ test: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ServerResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(p)</span></span></code></pre></div>`,60)]))}const E=a(r,[["render",n]]);export{c as __pageData,E as default};
