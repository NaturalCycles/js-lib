import{_ as a,c as i,o as e,ae as n}from"./chunks/framework.Xbv-JOCv.js";const y=JSON.parse('{"title":"Lazy","description":"","frontmatter":{},"headers":[],"relativePath":"lazy.md","filePath":"lazy.md"}'),t={name:"lazy.md"};function l(p,s,h,k,r,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="lazy" tabindex="-1">Lazy <a class="header-anchor" href="#lazy" aria-label="Permalink to &quot;Lazy&quot;">​</a></h1><h2 id="lazyvalue" tabindex="-1">_lazyValue <a class="header-anchor" href="#lazyvalue" aria-label="Permalink to &quot;\\_lazyValue&quot;">​</a></h2><p>Based on: <a href="https://github.com/sindresorhus/lazy-value" target="_blank" rel="noreferrer">https://github.com/sindresorhus/lazy-value</a></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _lazyValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> expensiveComputation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// calls expensiveComputation() once</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns cached result</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns cached result</span></span></code></pre></div><h2 id="definelazyproperty" tabindex="-1">_defineLazyProperty <a class="header-anchor" href="#definelazyproperty" aria-label="Permalink to &quot;\\_defineLazyProperty&quot;">​</a></h2><p>Based on: <a href="https://github.com/sindresorhus/define-lazy-prop" target="_blank" rel="noreferrer">https://github.com/sindresorhus/define-lazy-prop</a></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Obj</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_defineLazyProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;v&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> expensiveComputation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.v </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// runs expensiveComputation() once</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.v </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cached value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.v </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cached value</span></span></code></pre></div><h2 id="definelazyprops" tabindex="-1">_defineLazyProps <a class="header-anchor" href="#definelazyprops" aria-label="Permalink to &quot;\\_defineLazyProps&quot;">​</a></h2><p>Like <code>_defineLazyProperty</code>, but allows to define multiple props at once.</p>`,9)]))}const c=a(t,[["render",l]]);export{y as __pageData,c as default};
